import React, { useState } from 'react';
import { BarChart3, X, Plus, Download, TrendingUp, Users, DollarSign, Globe } from 'lucide-react';

interface Metric {
  id: string;
  name: string;
  value: number;
  target: number;
  category: string;
  trend: 'up' | 'down' | 'stable';
  change: number;
}

interface MetricsDashboardProps {
  isOpen: boolean;
  onClose: () => void;
}

const MetricsDashboard: React.FC<MetricsDashboardProps> = ({ isOpen, onClose }) => {
  const [metrics, setMetrics] = useState<Metric[]>([
    {
      id: '1',
      name: 'Monthly Active Users',
      value: 125000,
      target: 150000,
      category: 'Growth',
      trend: 'up',
      change: 12.5
    },
    {
      id: '2',
      name: 'Mobile App Downloads',
      value: 45000,
      target: 50000,
      category: 'Acquisition',
      trend: 'up',
      change: 8.3
    },
    {
      id: '3',
      name: 'Offline Usage Sessions',
      value: 78000,
      target: 80000,
      category: 'Engagement',
      trend: 'stable',
      change: 2.1
    },
    {
      id: '4',
      name: 'Local Payment Success Rate',
      value: 94.5,
      target: 95.0,
      category: 'Performance',
      trend: 'up',
      change: 1.2
    },
    {
      id: '5',
      name: 'Customer Acquisition Cost (USD)',
      value: 12.50,
      target: 10.00,
      category: 'Financial',
      trend: 'down',
      change: -5.2
    },
    {
      id: '6',
      name: 'Multi-language Adoption',
      value: 67.8,
      target: 75.0,
      category: 'Localization',
      trend: 'up',
      change: 15.3
    }
  ]);

  const [selectedCategory, setSelectedCategory] = useState('all');

  const categories = [
    { id: 'all', name: 'All Metrics', color: 'bg-gray-100' },
    { id: 'Growth', name: 'Growth', color: 'bg-green-100' },
    { id: 'Acquisition', name: 'Acquisition', color: 'bg-blue-100' },
    { id: 'Engagement', name: 'Engagement', color: 'bg-purple-100' },
    { id: 'Performance', name: 'Performance', color: 'bg-orange-100' },
    { id: 'Financial', name: 'Financial', color: 'bg-yellow-100' },
    { id: 'Localization', name: 'Localization', color: 'bg-pink-100' }
  ];

  const filteredMetrics = selectedCategory === 'all' 
    ? metrics 
    : metrics.filter(m => m.category === selectedCategory);

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return <TrendingUp className="h-4 w-4 text-green-500" />;
      case 'down': return <TrendingUp className="h-4 w-4 text-red-500 transform rotate-180" />;
      default: return <div className="h-4 w-4 bg-gray-400 rounded-full" />;
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up': return 'text-green-600';
      case 'down': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getProgressPercentage = (value: number, target: number) => {
    return Math.min((value / target) * 100, 100);
  };

  const exportDashboard = () => {
    const reportData = `
PM Metrics Dashboard Report - African Market KPIs
===============================================

Dashboard Overview:
Total Metrics Tracked: ${metrics.length}
Categories: ${categories.filter(c => c.id !== 'all').map(c => c.name).join(', ')}

Detailed Metrics:
${metrics.map(metric => `
${metric.name}:
  Current Value: ${metric.value.toLocaleString()}
  Target: ${metric.target.toLocaleString()}
  Progress: ${getProgressPercentage(metric.value, metric.target).toFixed(1)}%
  Trend: ${metric.trend} (${metric.change > 0 ? '+' : ''}${metric.change}%)
  Category: ${metric.category}
`).join('')}

Key Insights:
- Metrics on target: ${metrics.filter(m => m.value >= m.target).length}/${metrics.length}
- Positive trends: ${metrics.filter(m => m.trend === 'up').length}/${metrics.length}
- Areas needing attention: ${metrics.filter(m => m.value < m.target).map(m => m.name).join(', ')}

Generated by PM Africa Tools
    `;

    const blob = new Blob([reportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'pm-metrics-dashboard-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="bg-purple-500 p-2 rounded-lg mr-3">
              <BarChart3 className="h-6 w-6 text-white" />
            </div>
            <h2 className="text-xl font-bold text-gray-900">PM Metrics Dashboard</h2>
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="h-6 w-6" />
          </button>
        </div>

        <div className="p-6">
          {/* Category Filter */}
          <div className="flex flex-wrap gap-2 mb-6">
            {categories.map(category => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 ${
                  selectedCategory === category.id
                    ? 'bg-purple-600 text-white'
                    : `${category.color} text-gray-700 hover:bg-purple-100`
                }`}
              >
                {category.name}
              </button>
            ))}
          </div>

          {/* Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gradient-to-r from-green-500 to-green-600 p-4 rounded-lg text-white">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm opacity-90">On Target</div>
                  <div className="text-2xl font-bold">
                    {metrics.filter(m => m.value >= m.target).length}/{metrics.length}
                  </div>
                </div>
                <Users className="h-8 w-8 opacity-80" />
              </div>
            </div>

            <div className="bg-gradient-to-r from-blue-500 to-blue-600 p-4 rounded-lg text-white">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm opacity-90">Positive Trends</div>
                  <div className="text-2xl font-bold">
                    {metrics.filter(m => m.trend === 'up').length}
                  </div>
                </div>
                <TrendingUp className="h-8 w-8 opacity-80" />
              </div>
            </div>

            <div className="bg-gradient-to-r from-purple-500 to-purple-600 p-4 rounded-lg text-white">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm opacity-90">Avg. Progress</div>
                  <div className="text-2xl font-bold">
                    {(metrics.reduce((acc, m) => acc + getProgressPercentage(m.value, m.target), 0) / metrics.length).toFixed(0)}%
                  </div>
                </div>
                <BarChart3 className="h-8 w-8 opacity-80" />
              </div>
            </div>

            <div className="bg-gradient-to-r from-orange-500 to-orange-600 p-4 rounded-lg text-white">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-sm opacity-90">Categories</div>
                  <div className="text-2xl font-bold">
                    {categories.filter(c => c.id !== 'all').length}
                  </div>
                </div>
                <Globe className="h-8 w-8 opacity-80" />
              </div>
            </div>
          </div>

          {/* Metrics Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
            {filteredMetrics.map(metric => {
              const progress = getProgressPercentage(metric.value, metric.target);
              const isOnTarget = metric.value >= metric.target;
              
              return (
                <div key={metric.id} className="bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow duration-200">
                  <div className="flex items-center justify-between mb-3">
                    <span className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                      {metric.category}
                    </span>
                    <div className="flex items-center space-x-1">
                      {getTrendIcon(metric.trend)}
                      <span className={`text-sm font-medium ${getTrendColor(metric.trend)}`}>
                        {metric.change > 0 ? '+' : ''}{metric.change}%
                      </span>
                    </div>
                  </div>
                  
                  <h3 className="font-semibold text-gray-900 mb-2">{metric.name}</h3>
                  
                  <div className="mb-3">
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-2xl font-bold text-gray-900">
                        {metric.name.includes('Rate') || metric.name.includes('Adoption') 
                          ? `${metric.value}%` 
                          : metric.value.toLocaleString()}
                      </span>
                      <span className="text-sm text-gray-500">
                        Target: {metric.name.includes('Rate') || metric.name.includes('Adoption') 
                          ? `${metric.target}%` 
                          : metric.target.toLocaleString()}
                      </span>
                    </div>
                    
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full transition-all duration-300 ${
                          isOnTarget ? 'bg-green-500' : 'bg-orange-500'
                        }`}
                        style={{ width: `${Math.min(progress, 100)}%` }}
                      ></div>
                    </div>
                    
                    <div className="flex justify-between text-xs text-gray-500 mt-1">
                      <span>{progress.toFixed(1)}% of target</span>
                      <span className={isOnTarget ? 'text-green-600' : 'text-orange-600'}>
                        {isOnTarget ? '✓ On Target' : 'Needs Attention'}
                      </span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          {/* Export Button */}
          <div className="flex justify-center">
            <button
              onClick={exportDashboard}
              className="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 transition-colors duration-200 flex items-center space-x-2"
            >
              <Download className="h-5 w-5" />
              <span>Export Dashboard Report</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MetricsDashboard;