import React, { useState } from 'react';
import { Target, X, Plus, Trash2, Download } from 'lucide-react';

interface Feature {
  id: string;
  name: string;
  impact: number;
  effort: number;
  infrastructureDependency: number;
  regulatoryComplexity: number;
  culturalAdaptation: number;
}

interface FeaturePrioritizerProps {
  isOpen: boolean;
  onClose: () => void;
}

const FeaturePrioritizer: React.FC<FeaturePrioritizerProps> = ({ isOpen, onClose }) => {
  const [features, setFeatures] = useState<Feature[]>([
    {
      id: '1',
      name: 'Mobile Money Integration',
      impact: 9,
      effort: 6,
      infrastructureDependency: 8,
      regulatoryComplexity: 7,
      culturalAdaptation: 9
    },
    {
      id: '2',
      name: 'Offline Mode',
      impact: 8,
      effort: 8,
      infrastructureDependency: 9,
      regulatoryComplexity: 3,
      culturalAdaptation: 8
    },
    {
      id: '3',
      name: 'Multi-language Support',
      impact: 7,
      effort: 5,
      infrastructureDependency: 2,
      regulatoryComplexity: 2,
      culturalAdaptation: 10
    }
  ]);

  const [newFeature, setNewFeature] = useState({
    name: '',
    impact: 5,
    effort: 5,
    infrastructureDependency: 5,
    regulatoryComplexity: 5,
    culturalAdaptation: 5
  });

  const calculatePriorityScore = (feature: Feature) => {
    const impactWeight = 0.3;
    const effortWeight = -0.2; // Negative because lower effort is better
    const infraWeight = -0.15;
    const regulatoryWeight = -0.15;
    const culturalWeight = 0.2;

    return (
      feature.impact * impactWeight +
      feature.effort * effortWeight +
      feature.infrastructureDependency * infraWeight +
      feature.regulatoryComplexity * regulatoryWeight +
      feature.culturalAdaptation * culturalWeight
    );
  };

  const addFeature = () => {
    if (newFeature.name.trim()) {
      const feature: Feature = {
        id: Date.now().toString(),
        ...newFeature
      };
      setFeatures([...features, feature]);
      setNewFeature({
        name: '',
        impact: 5,
        effort: 5,
        infrastructureDependency: 5,
        regulatoryComplexity: 5,
        culturalAdaptation: 5
      });
    }
  };

  const removeFeature = (id: string) => {
    setFeatures(features.filter(f => f.id !== id));
  };

  const updateFeature = (id: string, field: keyof Feature, value: string | number) => {
    setFeatures(features.map(f => 
      f.id === id ? { ...f, [field]: value } : f
    ));
  };

  const exportResults = () => {
    const sortedFeatures = [...features].sort((a, b) => calculatePriorityScore(b) - calculatePriorityScore(a));
    
    const reportData = `
Feature Prioritization Report - African Market Context
====================================================

Prioritization Methodology:
- Impact Score (30% weight): Business value and user benefit
- Effort Score (-20% weight): Development complexity and time
- Infrastructure Dependency (-15% weight): Reliance on local infrastructure
- Regulatory Complexity (-15% weight): Compliance and legal requirements
- Cultural Adaptation (20% weight): Fit with local culture and practices

Prioritized Features:
${sortedFeatures.map((feature, index) => `
${index + 1}. ${feature.name}
   Priority Score: ${calculatePriorityScore(feature).toFixed(2)}
   Impact: ${feature.impact}/10
   Effort: ${feature.effort}/10
   Infrastructure Dependency: ${feature.infrastructureDependency}/10
   Regulatory Complexity: ${feature.regulatoryComplexity}/10
   Cultural Adaptation: ${feature.culturalAdaptation}/10
`).join('')}

Recommendations:
- High Priority: Features with scores above 3.0
- Medium Priority: Features with scores 1.0 - 3.0
- Low Priority: Features with scores below 1.0

Generated by PM Africa Tools
    `;

    const blob = new Blob([reportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'feature-prioritization-report.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getPriorityLevel = (score: number) => {
    if (score >= 3) return { label: 'High', color: 'bg-green-100 text-green-800' };
    if (score >= 1) return { label: 'Medium', color: 'bg-yellow-100 text-yellow-800' };
    return { label: 'Low', color: 'bg-red-100 text-red-800' };
  };

  const sortedFeatures = [...features].sort((a, b) => calculatePriorityScore(b) - calculatePriorityScore(a));

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="bg-green-500 p-2 rounded-lg mr-3">
              <Target className="h-6 w-6 text-white" />
            </div>
            <h2 className="text-xl font-bold text-gray-900">Feature Prioritization Matrix</h2>
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="h-6 w-6" />
          </button>
        </div>

        <div className="p-6">
          {/* Add New Feature */}
          <div className="bg-gray-50 p-4 rounded-lg mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Add New Feature</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="lg:col-span-3">
                <input
                  type="text"
                  placeholder="Feature name"
                  value={newFeature.name}
                  onChange={(e) => setNewFeature({ ...newFeature, name: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>
              
              {[
                { key: 'impact', label: 'Impact (1-10)' },
                { key: 'effort', label: 'Effort (1-10)' },
                { key: 'infrastructureDependency', label: 'Infrastructure Dependency (1-10)' },
                { key: 'regulatoryComplexity', label: 'Regulatory Complexity (1-10)' },
                { key: 'culturalAdaptation', label: 'Cultural Adaptation (1-10)' }
              ].map(({ key, label }) => (
                <div key={key}>
                  <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
                  <input
                    type="range"
                    min="1"
                    max="10"
                    value={newFeature[key as keyof typeof newFeature]}
                    onChange={(e) => setNewFeature({ ...newFeature, [key]: parseInt(e.target.value) })}
                    className="w-full"
                  />
                  <div className="text-center text-sm text-gray-600">
                    {newFeature[key as keyof typeof newFeature]}
                  </div>
                </div>
              ))}
            </div>
            <button
              onClick={addFeature}
              className="mt-4 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center space-x-2"
            >
              <Plus className="h-4 w-4" />
              <span>Add Feature</span>
            </button>
          </div>

          {/* Features List */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-900">Prioritized Features</h3>
              <button
                onClick={exportResults}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center space-x-2"
              >
                <Download className="h-4 w-4" />
                <span>Export Report</span>
              </button>
            </div>

            {sortedFeatures.map((feature, index) => {
              const score = calculatePriorityScore(feature);
              const priority = getPriorityLevel(score);
              
              return (
                <div key={feature.id} className="bg-white border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <span className="bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm font-medium">
                        #{index + 1}
                      </span>
                      <input
                        type="text"
                        value={feature.name}
                        onChange={(e) => updateFeature(feature.id, 'name', e.target.value)}
                        className="text-lg font-semibold text-gray-900 bg-transparent border-none focus:outline-none focus:ring-2 focus:ring-green-500 rounded px-2"
                      />
                    </div>
                    <div className="flex items-center space-x-3">
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${priority.color}`}>
                        {priority.label} Priority
                      </span>
                      <span className="text-lg font-bold text-gray-900">
                        {score.toFixed(2)}
                      </span>
                      <button
                        onClick={() => removeFeature(feature.id)}
                        className="text-red-500 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                    {[
                      { key: 'impact', label: 'Impact', color: 'bg-blue-50' },
                      { key: 'effort', label: 'Effort', color: 'bg-red-50' },
                      { key: 'infrastructureDependency', label: 'Infrastructure', color: 'bg-yellow-50' },
                      { key: 'regulatoryComplexity', label: 'Regulatory', color: 'bg-purple-50' },
                      { key: 'culturalAdaptation', label: 'Cultural', color: 'bg-green-50' }
                    ].map(({ key, label, color }) => (
                      <div key={key} className={`${color} p-3 rounded-lg`}>
                        <div className="text-sm font-medium text-gray-700 mb-1">{label}</div>
                        <input
                          type="range"
                          min="1"
                          max="10"
                          value={feature[key as keyof Feature]}
                          onChange={(e) => updateFeature(feature.id, key as keyof Feature, parseInt(e.target.value))}
                          className="w-full mb-1"
                        />
                        <div className="text-center text-sm font-semibold">
                          {feature[key as keyof Feature]}/10
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>

          {features.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              <Target className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p>No features added yet. Add your first feature above to get started.</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default FeaturePrioritizer;