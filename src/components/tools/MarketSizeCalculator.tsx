import React, { useState } from 'react';
import { Calculator, Download, X, Globe, Users, TrendingUp } from 'lucide-react';

interface MarketSizeCalculatorProps {
  isOpen: boolean;
  onClose: () => void;
}

const MarketSizeCalculator: React.FC<MarketSizeCalculatorProps> = ({ isOpen, onClose }) => {
  const [inputs, setInputs] = useState({
    country: 'nigeria',
    population: 220000000,
    internetPenetration: 51.9,
    smartphonePenetration: 83.3,
    targetDemographic: 25,
    conversionRate: 2.5,
    averageRevenue: 50
  });

  const countries = [
    { id: 'nigeria', name: 'Nigeria', population: 220000000, internetPenetration: 51.9, gdpPerCapita: 2085 },
    { id: 'south-africa', name: 'South Africa', population: 60000000, internetPenetration: 68.2, gdpPerCapita: 6001 },
    { id: 'kenya', name: 'Kenya', population: 54000000, internetPenetration: 87.2, gdpPerCapita: 1838 },
    { id: 'egypt', name: 'Egypt', population: 104000000, internetPenetration: 72.0, gdpPerCapita: 3019 },
    { id: 'ghana', name: 'Ghana', population: 32000000, internetPenetration: 68.0, gdpPerCapita: 2202 }
  ];

  const calculateMarketSize = () => {
    const country = countries.find(c => c.id === inputs.country);
    if (!country) return { tam: 0, sam: 0, som: 0, revenue: 0 };

    const internetUsers = (country.population * country.internetPenetration) / 100;
    const targetUsers = (internetUsers * inputs.targetDemographic) / 100;
    const potentialCustomers = (targetUsers * inputs.conversionRate) / 100;
    const potentialRevenue = potentialCustomers * inputs.averageRevenue;

    return {
      tam: Math.round(internetUsers),
      sam: Math.round(targetUsers),
      som: Math.round(potentialCustomers),
      revenue: Math.round(potentialRevenue)
    };
  };

  const handleInputChange = (field: string, value: number | string) => {
    const country = countries.find(c => c.id === value);
    if (field === 'country' && country) {
      setInputs({
        ...inputs,
        country: value as string,
        population: country.population,
        internetPenetration: country.internetPenetration
      });
    } else {
      setInputs({ ...inputs, [field]: value });
    }
  };

  const exportReport = () => {
    const results = calculateMarketSize();
    const country = countries.find(c => c.id === inputs.country);
    
    const reportData = `
African Market Size Analysis Report
==================================

Country: ${country?.name}
Population: ${inputs.population.toLocaleString()}
Internet Penetration: ${inputs.internetPenetration}%
Target Demographic: ${inputs.targetDemographic}%
Conversion Rate: ${inputs.conversionRate}%

Market Size Results:
- Total Addressable Market (TAM): ${results.tam.toLocaleString()} users
- Serviceable Addressable Market (SAM): ${results.sam.toLocaleString()} users  
- Serviceable Obtainable Market (SOM): ${results.som.toLocaleString()} users
- Potential Annual Revenue: $${results.revenue.toLocaleString()}

Generated by PM Africa Tools
    `;

    const blob = new Blob([reportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `market-size-analysis-${country?.name.toLowerCase()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const marketSize = calculateMarketSize();

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="bg-blue-500 p-2 rounded-lg mr-3">
              <Calculator className="h-6 w-6 text-white" />
            </div>
            <h2 className="text-xl font-bold text-gray-900">African Market Size Calculator</h2>
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="h-6 w-6" />
          </button>
        </div>

        <div className="p-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Input Section */}
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Target Country</label>
                <select 
                  value={inputs.country}
                  onChange={(e) => handleInputChange('country', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {countries.map(country => (
                    <option key={country.id} value={country.id}>{country.name}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Population: {inputs.population.toLocaleString()}
                </label>
                <input 
                  type="range"
                  min="1000000"
                  max="300000000"
                  step="1000000"
                  value={inputs.population}
                  onChange={(e) => handleInputChange('population', parseInt(e.target.value))}
                  className="w-full"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Internet Penetration: {inputs.internetPenetration}%
                </label>
                <input 
                  type="range"
                  min="10"
                  max="100"
                  step="0.1"
                  value={inputs.internetPenetration}
                  onChange={(e) => handleInputChange('internetPenetration', parseFloat(e.target.value))}
                  className="w-full"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Target Demographic: {inputs.targetDemographic}%
                </label>
                <input 
                  type="range"
                  min="1"
                  max="100"
                  value={inputs.targetDemographic}
                  onChange={(e) => handleInputChange('targetDemographic', parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-500 mt-1">
                  Percentage of internet users who fit your target demographic
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Conversion Rate: {inputs.conversionRate}%
                </label>
                <input 
                  type="range"
                  min="0.1"
                  max="20"
                  step="0.1"
                  value={inputs.conversionRate}
                  onChange={(e) => handleInputChange('conversionRate', parseFloat(e.target.value))}
                  className="w-full"
                />
                <div className="text-xs text-gray-500 mt-1">
                  Expected percentage of target users who will become customers
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Average Annual Revenue per Customer: ${inputs.averageRevenue}
                </label>
                <input 
                  type="range"
                  min="10"
                  max="1000"
                  step="10"
                  value={inputs.averageRevenue}
                  onChange={(e) => handleInputChange('averageRevenue', parseInt(e.target.value))}
                  className="w-full"
                />
              </div>
            </div>

            {/* Results Section */}
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Market Size Results</h3>
              
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-medium text-gray-900">Total Addressable Market (TAM)</div>
                      <div className="text-xs text-gray-600">All internet users in the country</div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-blue-600">{marketSize.tam.toLocaleString()}</div>
                      <div className="text-xs text-gray-600">users</div>
                    </div>
                  </div>
                </div>

                <div className="bg-green-50 p-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-medium text-gray-900">Serviceable Addressable Market (SAM)</div>
                      <div className="text-xs text-gray-600">Target demographic subset</div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-green-600">{marketSize.sam.toLocaleString()}</div>
                      <div className="text-xs text-gray-600">users</div>
                    </div>
                  </div>
                </div>

                <div className="bg-orange-50 p-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-medium text-gray-900">Serviceable Obtainable Market (SOM)</div>
                      <div className="text-xs text-gray-600">Realistic customer base</div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-orange-600">{marketSize.som.toLocaleString()}</div>
                      <div className="text-xs text-gray-600">customers</div>
                    </div>
                  </div>
                </div>

                <div className="bg-purple-50 p-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-medium text-gray-900">Potential Annual Revenue</div>
                      <div className="text-xs text-gray-600">Based on conversion and ARPU</div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-purple-600">${marketSize.revenue.toLocaleString()}</div>
                      <div className="text-xs text-gray-600">per year</div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-medium text-gray-900 mb-2">Market Insights</h4>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>• Market penetration rate: {((marketSize.som / marketSize.tam) * 100).toFixed(2)}%</li>
                  <li>• Revenue per internet user: ${(marketSize.revenue / marketSize.tam).toFixed(2)}</li>
                  <li>• Customer acquisition potential: {marketSize.som.toLocaleString()} users</li>
                </ul>
              </div>

              <button 
                onClick={exportReport}
                className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center space-x-2"
              >
                <Download className="h-4 w-4" />
                <span>Export Detailed Report</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MarketSizeCalculator;